name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_repo1:
    runs-on: self-hosted
    steps:
    - name: Checkout Microservices
      uses: actions/checkout@v4
      with:
        repository: Hieuln99/Microservices  # Thay 'user/repo1' bằng tên repo đầu tiên
        token: ${{ secrets.GITHUB_TOKEN }}  # Dùng GitHub token để có quyền truy cập
        ref: main  # Chỉ định nhánh cần checkout từ repo1

  build_repo2:
    runs-on: self-hosted
    steps:
    - name: Checkout TestHTML
      uses: actions/checkout@v4
      with:
        repository: Hieuln99/TestHTML  # Thay 'user/repo2' bằng tên repo thứ hai
        token: ${{ secrets.GITHUB_TOKEN }}  # Dùng GitHub token để có quyền truy cập
        ref: main  # Chỉ định nhánh cần checkout từ repo2

  build:
    needs: [build_repo1, build_repo2]  # Đảm bảo job này chỉ chạy sau khi cả hai job trên hoàn tất
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: self-hosted

    env:
      ACTIONS_STEP_DEBUG: true
      Solution_Name: C:\actions-runner\_work\FinalProject\FinalProject\QuizzApp\QuizzApp\QuizzApp.sln
      Wap_Project_Directory: C:\actions-runner\_work\FinalProject\FinalProject\QuizzApp\QuizzApp
      Wap_Project_Path: C:\actions-runner\_work\FinalProject\FinalProject\QuizzApp\QuizzApp\QuizzApp.Web\QuizzApp.Web.csproj
    steps:
    - name: Checkout
      uses: actions/checkout@v4 
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Print Current Directory and List Files
      run: |
        pwd  # In đường dẫn hiện tại
        dir  # Liệt kê tất cả các tệp trong thư mục

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
